/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package formulario.contato.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import formulario.contato.model.Municipio;
import formulario.contato.model.MunicipioModel;
import formulario.contato.model.MunicipioSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Municipio service. Represents a row in the &quot;FC_Municipio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MunicipioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MunicipioImpl}.
 * </p>
 *
 * @author Eglen
 * @see MunicipioImpl
 * @generated
 */
@JSON(strict = true)
public class MunicipioModelImpl
	extends BaseModelImpl<Municipio> implements MunicipioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a municipio model instance should use the <code>Municipio</code> interface instead.
	 */
	public static final String TABLE_NAME = "FC_Municipio";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"municipioId", Types.BIGINT}, {"nome", Types.VARCHAR},
		{"codigo", Types.VARCHAR}, {"estadoId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("municipioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codigo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estadoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FC_Municipio (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,municipioId LONG not null primary key,nome VARCHAR(75) null,codigo VARCHAR(75) null,estadoId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table FC_Municipio";

	public static final String ORDER_BY_JPQL = " ORDER BY municipio.nome DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FC_Municipio.nome DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long NOME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Municipio toModel(MunicipioSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Municipio model = new MunicipioImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setMunicipioId(soapModel.getMunicipioId());
		model.setNome(soapModel.getNome());
		model.setCodigo(soapModel.getCodigo());
		model.setEstadoId(soapModel.getEstadoId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Municipio> toModels(MunicipioSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Municipio> models = new ArrayList<Municipio>(soapModels.length);

		for (MunicipioSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public MunicipioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _municipioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMunicipioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _municipioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Municipio.class;
	}

	@Override
	public String getModelClassName() {
		return Municipio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Municipio, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Municipio, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Municipio, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Municipio)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Municipio, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Municipio, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Municipio)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Municipio, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Municipio, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Municipio>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Municipio.class.getClassLoader(), Municipio.class,
			ModelWrapper.class);

		try {
			Constructor<Municipio> constructor =
				(Constructor<Municipio>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Municipio, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Municipio, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Municipio, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Municipio, Object>>();
		Map<String, BiConsumer<Municipio, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Municipio, ?>>();

		attributeGetterFunctions.put("mvccVersion", Municipio::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<Municipio, Long>)Municipio::setMvccVersion);
		attributeGetterFunctions.put("uuid", Municipio::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Municipio, String>)Municipio::setUuid);
		attributeGetterFunctions.put("municipioId", Municipio::getMunicipioId);
		attributeSetterBiConsumers.put(
			"municipioId",
			(BiConsumer<Municipio, Long>)Municipio::setMunicipioId);
		attributeGetterFunctions.put("nome", Municipio::getNome);
		attributeSetterBiConsumers.put(
			"nome", (BiConsumer<Municipio, String>)Municipio::setNome);
		attributeGetterFunctions.put("codigo", Municipio::getCodigo);
		attributeSetterBiConsumers.put(
			"codigo", (BiConsumer<Municipio, String>)Municipio::setCodigo);
		attributeGetterFunctions.put("estadoId", Municipio::getEstadoId);
		attributeSetterBiConsumers.put(
			"estadoId", (BiConsumer<Municipio, Long>)Municipio::setEstadoId);
		attributeGetterFunctions.put("groupId", Municipio::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Municipio, Long>)Municipio::setGroupId);
		attributeGetterFunctions.put("companyId", Municipio::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Municipio, Long>)Municipio::setCompanyId);
		attributeGetterFunctions.put("userId", Municipio::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Municipio, Long>)Municipio::setUserId);
		attributeGetterFunctions.put("userName", Municipio::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Municipio, String>)Municipio::setUserName);
		attributeGetterFunctions.put("createDate", Municipio::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Municipio, Date>)Municipio::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Municipio::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Municipio, Date>)Municipio::setModifiedDate);
		attributeGetterFunctions.put("status", Municipio::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Municipio, Integer>)Municipio::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Municipio::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Municipio, Long>)Municipio::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Municipio::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Municipio, String>)Municipio::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Municipio::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<Municipio, Date>)Municipio::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMunicipioId() {
		return _municipioId;
	}

	@Override
	public void setMunicipioId(long municipioId) {
		_municipioId = municipioId;
	}

	@JSON
	@Override
	public String getNome() {
		if (_nome == null) {
			return "";
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_columnBitmask = -1L;

		_nome = nome;
	}

	@JSON
	@Override
	public String getCodigo() {
		if (_codigo == null) {
			return "";
		}
		else {
			return _codigo;
		}
	}

	@Override
	public void setCodigo(String codigo) {
		_codigo = codigo;
	}

	@JSON
	@Override
	public long getEstadoId() {
		return _estadoId;
	}

	@Override
	public void setEstadoId(long estadoId) {
		_estadoId = estadoId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Municipio.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Municipio.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Municipio toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Municipio>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MunicipioImpl municipioImpl = new MunicipioImpl();

		municipioImpl.setMvccVersion(getMvccVersion());
		municipioImpl.setUuid(getUuid());
		municipioImpl.setMunicipioId(getMunicipioId());
		municipioImpl.setNome(getNome());
		municipioImpl.setCodigo(getCodigo());
		municipioImpl.setEstadoId(getEstadoId());
		municipioImpl.setGroupId(getGroupId());
		municipioImpl.setCompanyId(getCompanyId());
		municipioImpl.setUserId(getUserId());
		municipioImpl.setUserName(getUserName());
		municipioImpl.setCreateDate(getCreateDate());
		municipioImpl.setModifiedDate(getModifiedDate());
		municipioImpl.setStatus(getStatus());
		municipioImpl.setStatusByUserId(getStatusByUserId());
		municipioImpl.setStatusByUserName(getStatusByUserName());
		municipioImpl.setStatusDate(getStatusDate());

		municipioImpl.resetOriginalValues();

		return municipioImpl;
	}

	@Override
	public int compareTo(Municipio municipio) {
		int value = 0;

		value = getNome().compareTo(municipio.getNome());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Municipio)) {
			return false;
		}

		Municipio municipio = (Municipio)obj;

		long primaryKey = municipio.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		MunicipioModelImpl municipioModelImpl = this;

		municipioModelImpl._originalUuid = municipioModelImpl._uuid;

		municipioModelImpl._originalGroupId = municipioModelImpl._groupId;

		municipioModelImpl._setOriginalGroupId = false;

		municipioModelImpl._originalCompanyId = municipioModelImpl._companyId;

		municipioModelImpl._setOriginalCompanyId = false;

		municipioModelImpl._setModifiedDate = false;

		municipioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Municipio> toCacheModel() {
		MunicipioCacheModel municipioCacheModel = new MunicipioCacheModel();

		municipioCacheModel.mvccVersion = getMvccVersion();

		municipioCacheModel.uuid = getUuid();

		String uuid = municipioCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			municipioCacheModel.uuid = null;
		}

		municipioCacheModel.municipioId = getMunicipioId();

		municipioCacheModel.nome = getNome();

		String nome = municipioCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			municipioCacheModel.nome = null;
		}

		municipioCacheModel.codigo = getCodigo();

		String codigo = municipioCacheModel.codigo;

		if ((codigo != null) && (codigo.length() == 0)) {
			municipioCacheModel.codigo = null;
		}

		municipioCacheModel.estadoId = getEstadoId();

		municipioCacheModel.groupId = getGroupId();

		municipioCacheModel.companyId = getCompanyId();

		municipioCacheModel.userId = getUserId();

		municipioCacheModel.userName = getUserName();

		String userName = municipioCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			municipioCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			municipioCacheModel.createDate = createDate.getTime();
		}
		else {
			municipioCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			municipioCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			municipioCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		municipioCacheModel.status = getStatus();

		municipioCacheModel.statusByUserId = getStatusByUserId();

		municipioCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = municipioCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			municipioCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			municipioCacheModel.statusDate = statusDate.getTime();
		}
		else {
			municipioCacheModel.statusDate = Long.MIN_VALUE;
		}

		return municipioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Municipio, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Municipio, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Municipio, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Municipio)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Municipio, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Municipio, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Municipio, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Municipio)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Municipio>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _municipioId;
	private String _nome;
	private String _codigo;
	private long _estadoId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private Municipio _escapedModel;

}